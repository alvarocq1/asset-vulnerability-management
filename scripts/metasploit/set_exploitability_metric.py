import subprocess
import psycopg2

def get_exploit_maturity(cve_id):
    # Ejecutar el comando en la terminal
    result = subprocess.run(['msfconsole', '-q', '-x', f'search cve:{cve_id}; exit'], capture_output=True, text=True)
    output = result.stdout

    if "No results found" in output:
        return "U"  # Unproven

    # Analizar la salida para determinar la madurez del exploit
    if "excellent" in output:
        return "H"  # High
    elif "great" in output or "good" in output:
        return "F"  # Functional
    elif "manual" in output or "average" in output:
        return "P"  # Proof-of-Concept
    else:
        return "X"  # Not Defined

# Conexión a la base de datos
conn = psycopg2.connect(
    dbname="project_db",
    user="acarriq",
    password="3432576",
    host="localhost",
    port="5433"
)

# Crear un cursor
cur = conn.cursor()

# Añadir la nueva columna si no existe
cur.execute("""
    ALTER TABLE scan_results
    ADD COLUMN IF NOT EXISTS Exploitability VARCHAR(1);
""")
conn.commit()

# Obtener todos los CVEs únicos de la tabla scan_results
cur.execute("SELECT DISTINCT cve FROM scan_results WHERE cve IS NOT NULL")
cve_list = cur.fetchall()

# Actualizar cada registro con la métrica de "Exploit Code Maturity"
for cve in cve_list:
    cve_id = cve[0]
    maturity = get_exploit_maturity(cve_id)
    cur.execute("""
        UPDATE scan_results
        SET Exploitability = %s
        WHERE cve = %s
    """, (maturity, cve_id))

# Confirmar los cambios
conn.commit()

# Cerrar el cursor y la conexión
cur.close()
conn.close()

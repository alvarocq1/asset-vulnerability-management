import subprocess
import psycopg2

def get_exploit_maturity(cve_id):
    print(f"Checking exploit maturity for CVE: {cve_id}")
    # Ejecutar el comando en la terminal
    try:
        result = subprocess.run(
            ['msfconsole', '-q', '-x', f'search cve:{cve_id}; exit'],
            capture_output=True, text=True, timeout=60
        )
        output = result.stdout
        print(f"Output for CVE {cve_id}:\n{output}")

        if "No results found" in output:
            return "U"  # Unproven

        # Analizar la salida para determinar la madurez del exploit
        if "excellent" in output:
            return "H"  # High
        elif "great" in output:
            return "H"  # High
        elif "good" in output:
            return "F"  # Functional
        elif "normal" in output:
            return "F"  # Functional
        elif "average" in output:
            return "P"  # Proof-of-Concept
        elif "low" in output or "manual" in output:
            return "U"  # Unproven
        else:
            return "X"  # Not Defined
    except subprocess.TimeoutExpired:
        print(f"Timeout expired for CVE: {cve_id}")
        return "X"
    except FileNotFoundError:
        print("msfconsole not found. Make sure Metasploit is installed and in your PATH.")
        return "X"

# Conexión a la base de datos
print("Connecting to the database...")
conn = psycopg2.connect(
    dbname="project_db",
    user="acarriq",
    password="3432576",
    host="localhost",
    port="5432"
)

# Crear un cursor
cur = conn.cursor()

# Añadir la nueva columna si no existe
print("Altering table to add Exploitability column if it doesn't exist...")
cur.execute("""
    ALTER TABLE scan_results
    ADD COLUMN IF NOT EXISTS Exploitability VARCHAR(1);
""")
conn.commit()

# Obtener todos los CVEs únicos de la tabla scan_results
print("Fetching distinct CVEs from scan_results...")
cur.execute("SELECT DISTINCT cve FROM scan_results WHERE cve IS NOT NULL")
cve_list = cur.fetchall()

# Actualizar cada registro con la métrica de "Exploit Code Maturity"
for cve in cve_list:
    cve_id = cve[0]
    print(f"Processing CVE: {cve_id}")
    maturity = get_exploit_maturity(cve_id)
    print(f"Updating CVE {cve_id} with maturity {maturity}")
    cur.execute("""
        UPDATE scan_results
        SET Exploitability = %s
        WHERE cve = %s
    """, (maturity, cve_id))
    conn.commit()  # Confirmar los cambios después de cada actualización para evitar perder datos en caso de interrupción

# Cerrar el cursor y la conexión
cur.close()
conn.close()
print("Database connection closed.")

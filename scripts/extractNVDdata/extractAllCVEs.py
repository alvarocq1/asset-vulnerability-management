import requests
import csv
import time

# Configura tu clave API y la URL base de la NVD
api_key = 'c54455ca-28f6-4222-88c3-facda15ed7b6'
base_url = 'https://services.nvd.nist.gov/rest/json/cves/2.0'

# Define los parámetros de la solicitud
params = {
    'resultsPerPage': 2000,  # Ajusta el número de resultados por página
    'startIndex': 0
}

# Define los valores de exploitabilidad
exploitability_map = {
    'H': 'High',
    'F': 'Functional',
    'P': 'Proof of Concept',
    'U': 'Unproven',
    'X': 'Not Defined'
}

headers = {'apiKey': api_key}

# Función para extraer puntuaciones y vectores CVSS de los datos
def extract_cvss_scores(metrics, version):
    vector, exploitability = None, 'X'
    
    if f'cvssMetric{version}' in metrics:
        for metric in metrics[f'cvssMetric{version}']:
            vector = metric['cvssData']['vectorString']
            if 'exploitability' in metric:
                exploitability = metric['exploitability']
            elif 'exploitabilityScore' in metric:
                exploitability = metric['exploitabilityScore']
            elif 'exploitCodeMaturity' in metric:
                exploitability = metric['exploitCodeMaturity']
    
    return vector, exploitability

# Abre el archivo CSV para escribir los datos
with open('cves_completos.csv', mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(['CVE ID', 'CVSS 2.0 Vector', 'CVSS 2.0 Exploitability', 'CVSS 3.0 Vector', 'CVSS 3.0 Exploitability', 'CVSS 3.1 Vector', 'CVSS 3.1 Exploitability'])

    total_cves = 0

    while True:
        try:
            response = requests.get(base_url, headers=headers, params=params)
            response.raise_for_status()
            data = response.json()
        except requests.exceptions.RequestException as err:
            print(f"Error durante la solicitud: {err}")
            break

        if 'vulnerabilities' not in data:
            break

        for item in data['vulnerabilities']:
            cve_item = item['cve']
            cve_id = cve_item['id']
            metrics = cve_item.get('metrics', {})

            cvss_v2_vector, cvss_v2_exploitability = extract_cvss_scores(metrics, 'V2')
            cvss_v30_vector, cvss_v30_exploitability = extract_cvss_scores(metrics, 'V30')
            cvss_v31_vector, cvss_v31_exploitability = extract_cvss_scores(metrics, 'V31')

            writer.writerow([
                cve_id,
                cvss_v2_vector,
                cvss_v2_exploitability,
                cvss_v30_vector,
                cvss_v30_exploitability,
                cvss_v31_vector,
                cvss_v31_exploitability
            ])

            total_cves += 1

        params['startIndex'] += 2000

        if len(data['vulnerabilities']) < 2000:
            break

        time.sleep(6)

        print(f"Total de CVEs procesados: {total_cves}")

print("Proceso completado.")

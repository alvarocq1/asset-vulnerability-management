import psycopg2
from gvm.connections import TLSConnection
from gvm.protocols.gmp import Gmp
from gvm.transforms import EtreeCheckCommandTransform
from gvm.errors import GvmError
from lxml import etree

def authenticate(gmp):
    gmp.authenticate('admin', '9133101d-303a-4b10-8c8a-9c9c6c7142d0')  # Cambia las credenciales según corresponda

def get_report_id_by_task(gmp, task_id):
    response = gmp.get_reports(filter_string=f"task_id={task_id}")
    report_id = None
    for report in response.xpath('.//report'):
        report_id = report.get('id')
        break
    return report_id

def fetch_report(gmp, report_id, cursor, conn):
    try:
        response = gmp.get_report(report_id=report_id, details=True, ignore_pagination=True)

        # Escribir el XML de respuesta en un archivo
        with open(f"report_{report_id}.xml", "w") as file:
            file.write(etree.tostring(response, pretty_print=True).decode())

        print(f"The XML report has been written to 'report_{report_id}.xml'.")

        print("\nResults:")
        count_inserted = 0
        count_skipped = 0
        for result in response.xpath('//report/results/result'):
            result_id = result.get('id')
            name = result.find('name').text
            host = result.find('host').text
            port = result.find('port').text if result.find('port') is not None else 'N/A'
            cvss = result.find('nvt/cvss_base').text if result.find('nvt/cvss_base') is not None else '0.0'
            qod = result.find('qod/value').text if result.find('qod/value') is not None else 'N/A'
            nvt = result.find('nvt')
            if nvt is not None:
                nvt_oid = nvt.get('oid') if nvt is not None else 'N/A'
                nvt_family = nvt.find('family').text if nvt.find('family') is not None else 'N/A'
                solution_type = nvt.find('solution').get('type') if nvt.find('solution') is not None else 'N/A'
                
                # Extracting CVE ID
                cve = 'N/A'
                refs = nvt.find('refs')
                if refs is not None:
                    for ref in refs.findall('ref'):
                        if ref.get('type') == 'cve':
                            cve = ref.get('id')
                            break
                
                # Extracting CVSS Vector and Type
                cvss_vector = 'N/A'
                cvss_type = 'N/A'
                severity = nvt.find('severities/severity')
                if severity is not None:
                    cvss_type = severity.get('type')
                    cvss_vector = severity.find('value').text

                # Only process results with CVSS > 0.0
                if float(cvss) > 0.0:
                    print(f"Result ID: {result_id}")
                    print(f"Name: {name}")
                    print(f"Host: {host}")
                    print(f"Port: {port}")
                    print(f"Solution Type: {solution_type}")
                    print(f"CVSS: {cvss}")
                    print(f"CVSS Vector: {cvss_vector}")
                    print(f"CVSS Type: {cvss_type}")
                    print(f"NVT OID: {nvt_oid}")
                    print(f"NVT Family: {nvt_family}")
                    print(f"CVE: {cve}")
                    print(f"QOD: {qod}")
                    print()

                    try:
                        # Insert result into database
                        cursor.execute("""
                            INSERT INTO scan_results (result_id, name, host, port, cvss, qod, nvt_oid, nvt_family, cve, solution_type, cvss_vector, cvss_type)
                            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                            ON CONFLICT (result_id) DO NOTHING;
                        """, (result_id, name, host, port, cvss, qod, nvt_oid, nvt_family, cve, solution_type, cvss_vector, cvss_type))
                        conn.commit()  # Commit the transaction
                        count_inserted += 1
                    except Exception as e:
                        print(f"Error inserting result {result_id}: {e}")
                        conn.rollback()  # Rollback the transaction
                        count_skipped += 1

        print(f"Inserted {count_inserted} results, skipped {count_skipped} results due to errors.")
            
    except GvmError as e:
        print(f'An error occurred: {e}')

def process_tasks(cursor, gmp, conn):
    # Recuperar todas las tareas de la tabla scan_tasks
    cursor.execute("SELECT task_id FROM scan_tasks")
    tasks = cursor.fetchall()

    for task in tasks:
        task_id = task[0]
        print(f"Fetching report ID for task ID: {task_id}")
        report_id = get_report_id_by_task(gmp, task_id)
        
        if report_id:
            print(f"Report ID found: {report_id}")
            fetch_report(gmp, report_id, cursor, conn)
        else:
            print(f"No report found for the given task ID: {task_id}")

def main():
    # Conectar a PostgreSQL
    conn = psycopg2.connect(
        dbname="project_db",
        user="acarriq",
        password="3432576",
        host="localhost",
        port="5433"
    )
    cursor = conn.cursor()

    # Conectar a OpenVAS usando TLSConnection
    connection = TLSConnection(hostname='192.168.1.36', port=9390)  # Cambia '192.168.1.36' por la IP de tu servidor OpenVAS
    transform = EtreeCheckCommandTransform()
    print("Connecting to OpenVAS...")
    with Gmp(connection=connection, transform=transform) as gmp:
        print("Authenticating...")
        authenticate(gmp)

        # Procesar todas las tareas
        process_tasks(cursor, gmp, conn)

        gmp.disconnect()

    # Guardar cambios y cerrar la conexión
    cursor.close()
    conn.close()

if __name__ == "__main__":
    main()

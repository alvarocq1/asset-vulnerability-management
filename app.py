from flask import Flask, render_template, request, redirect, url_for, jsonify, send_from_directory, session
from flask_socketio import SocketIO, emit
import subprocess
import psycopg2
from datetime import datetime, timedelta
from src.config.config import DB_NAME, DB_USER, DB_PASSWORD, DB_HOST, DB_PORT
from src.utils.check_connections import check_postgresql_connection, check_openvas_connection
import os
import logging
import decimal

logging.basicConfig(level=logging.DEBUG)

app = Flask(__name__, static_folder='static', template_folder='templates')
app.secret_key = 'your_secret_key'
socketio = SocketIO(app)

scan_status = {
    'scanning': False,
    'progress': 0,
    'message': ''
}

def update_scan_status(scanning, progress, message):
    scan_status['scanning'] = scanning
    scan_status['progress'] = progress
    scan_status['message'] = message
    socketio.emit('scan_update', scan_status)

def get_cves_from_scan_results(ip_address=None):
    try:
        conn = psycopg2.connect(
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT
        )
        cursor = conn.cursor()
        if ip_address:
            cursor.execute("SELECT result_id, name, cvss, COALESCE(correlation_risk, 0.0) FROM scan_results WHERE ip_address = %s ORDER BY correlation_risk DESC", (ip_address,))
        else:
            cursor.execute("SELECT result_id, name, cvss, COALESCE(correlation_risk, 0.0) FROM scan_results ORDER BY correlation_risk DESC")
        cves = cursor.fetchall()
        cursor.close()
        conn.close()
        return cves
    except Exception as e:
        logging.error(f"Error al conectar a la base de datos: {e}")
        return []

def get_cve_details(result_id):
    try:
        conn = psycopg2.connect(
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT
        )
        cursor = conn.cursor()
        cursor.execute("""
            SELECT result_id, name, ip_address, port, cvss, qod, cves, solution_type, cvss_type, cvss_vector, correlation_risk, exploitability, description, solution
            FROM scan_results WHERE result_id = %s
        """, (result_id,))
        details = cursor.fetchone()
        cursor.close()
        conn.close()
        return details
    except Exception as e:
        logging.error(f"Error al conectar a la base de datos: {e}")
        return None

def get_scan_metadata(ip_address=None):
    try:
        conn = psycopg2.connect(
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT
        )
        cursor = conn.cursor()
        if ip_address:
            cursor.execute("""
                SELECT COUNT(*), SUM(EXTRACT(EPOCH FROM (end_time - start_time))) / 60 AS scan_time 
                FROM scan_metadata WHERE ip_address = %s
            """, (ip_address,))
        else:
            cursor.execute("""
                SELECT COUNT(*), SUM(EXTRACT(EPOCH FROM (end_time - start_time))) / 60 AS scan_time 
                FROM scan_metadata
            """)
        metadata = cursor.fetchone()
        cursor.close()
        conn.close()
        return metadata
    except Exception as e:
        logging.error(f"Error al conectar a la base de datos: {e}")
        return None, None

def get_last_scan():
    try:
        conn = psycopg2.connect(
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT
        )
        cursor = conn.cursor()
        cursor.execute("SELECT MAX(end_time) FROM scan_metadata")
        last_scan = cursor.fetchone()
        cursor.close()
        conn.close()
        if last_scan and last_scan[0]:
            last_scan_time = last_scan[0]
            return last_scan_time.strftime("%Y-%m-%d %H:%M:%S")
        else:
            return None
    except Exception as e:
        logging.error(f"Error al conectar a la base de datos: {e}")
        return None

def get_assets():
    try:
        conn = psycopg2.connect(
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT
        )
        cursor = conn.cursor()
        cursor.execute("SELECT ip_address, os FROM assets")
        assets = cursor.fetchall()
        cursor.close()
        conn.close()
        return assets
    except Exception as e:
        logging.error(f"Error al conectar a la base de datos: {e}")
        return []

@app.route('/')
def index():
    last_scan = get_last_scan()
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    return render_template('index.html', last_scan=last_scan, current_time=current_time, scan_status=scan_status)

@app.route('/run_pipeline', methods=['POST'])
def run_pipeline():
    steps = [
        ('Limpiando los tasks anteriores...', 'src/tools/vulnerability_analysis/delete_scans.py'),
        # ('Iniciando escaneo de activos', 'src/tools/asset_recognition/nmap_scan.py'),
        ('Escaneando activos con OpenVAS...', 'src/tools/vulnerability_analysis/openvas_scan.py'),
        ('Guardando resultados del escaneo...', 'src/tools/vulnerability_analysis/fetch_and_store_results.py'),
        ('Convirtiendo los scans...', 'src/models/convert_scans.py'),
        ('Obteniendo la metrica "Exploitability"...', 'src/tools/metasploit/set_exploitability_metric.py'),
        ('Calculando la correlación...', 'src/tools/vulnerability_correlation/calculate_correlation.py'),
        ('Generando gráficos...', 'src/tools/analysis/cves_plot.py')
    ]

    update_scan_status(True, 0, 'Iniciando escaneo de activos...')

    for i, (message, script) in enumerate(steps):
        update_scan_status(True, int((i / len(steps)) * 100), message)
        subprocess.run(['python', script])
    
    update_scan_status(False, 100, 'Escaneo completado.')

    return redirect(url_for('index'))

@app.route('/show_cves', methods=['GET'])
def show_cves():
    cves = get_cves_from_scan_results()
    return render_template('cves.html', cves=cves)

@app.route('/cve_details/<result_id>', methods=['GET'])
def cve_details(result_id):
    details = get_cve_details(result_id)
    return render_template('cve_details.html', result_id=result_id, details=details)

@app.route('/show_assets', methods=['GET'])
def show_assets():
    assets = get_assets()
    return render_template('assets.html', assets=assets)

@app.route('/correlation_analysis', methods=['GET'])
def correlation_analysis():
    return render_template('correlation_analysis.html')

@app.route('/figures/<filename>')
def figures(filename):
    return send_from_directory('src/figures/cvss_distribution', filename)

@app.route('/analysis')
def analysis():
    view = request.args.get('view', 'general')
    if view == 'general':
        total_vulnerabilities, scan_time_seconds = get_scan_metadata()
        cves = get_cves_from_scan_results()
        image_file = 'general_cvss_distribution.png'
    else:
        total_vulnerabilities, scan_time_seconds = get_scan_metadata(view)
        cves = get_cves_from_scan_results(view)
        image_file = f'{view.replace(".", "_")}_cvss_distribution.png'
    assets = get_assets()

    if scan_time_seconds is not None:
        scan_time_seconds = float(scan_time_seconds) * 60
        scan_time = str(timedelta(seconds=scan_time_seconds))
        scan_time = scan_time.split(".")[0]
    else:
        scan_time = "N/A"
    
    return render_template('analysis.html', total_vulnerabilities=total_vulnerabilities, scan_time=scan_time, cves=cves, image_file=image_file, assets=assets, selected_view=view)

@app.route('/check_status', methods=['GET'])
def check_status():
    db_status = check_postgresql_connection()
    openvas_status = check_openvas_connection()
    return jsonify({'db_status': db_status, 'openvas_status': openvas_status})

@socketio.on('start_scan')
def start_scan():
    update_scan_status(True, 0, 'Iniciando escaneo de activos...')
    socketio.start_background_task(target=run_pipeline)

if __name__ == "__main__":
    socketio.run(app, debug=True)

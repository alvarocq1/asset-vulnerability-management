from flask import Flask, render_template, request, redirect, url_for
import subprocess
import psycopg2
from datetime import datetime
from src.config.config import DB_NAME, DB_USER, DB_PASSWORD, DB_HOST, DB_PORT

app = Flask(__name__)

def get_cves_from_scan_results():
    try:
        conn = psycopg2.connect(
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT
        )
        cursor = conn.cursor()
        cursor.execute("SELECT result_id, cve, correlation_risk FROM scan_results ORDER BY correlation_risk DESC")
        cves = cursor.fetchall()
        cursor.close()
        conn.close()
        return cves
    except Exception as e:
        print(f"Error al conectar a la base de datos: {e}")
        return []

def get_cve_details(result_id):
    try:
        conn = psycopg2.connect(
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT
        )
        cursor = conn.cursor()
        cursor.execute("""
            SELECT result_id, name, host, port, cvss, qod, solution_type, cvss_type, cvss_vector, exploitability
            FROM scan_results WHERE result_id = %s
        """, (result_id,))
        details = cursor.fetchone()
        cursor.close()
        conn.close()
        return details
    except Exception as e:
        print(f"Error al conectar a la base de datos: {e}")
        return None

def get_assets():
    try:
        conn = psycopg2.connect(
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT
        )
        cursor = conn.cursor()
        cursor.execute("SELECT ip_address, os FROM assets")
        assets = cursor.fetchall()
        cursor.close()
        conn.close()
        return assets
    except Exception as e:
        print(f"Error al conectar a la base de datos: {e}")
        return []

def get_last_scan():
    try:
        conn = psycopg2.connect(
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT
        )
        cursor = conn.cursor()
        cursor.execute("SELECT scan_time FROM scan_metadata ORDER BY scan_time DESC LIMIT 1")
        last_scan = cursor.fetchone()
        cursor.close()
        conn.close()
        return last_scan[0] if last_scan else None
    except Exception as e:
        print(f"Error al conectar a la base de datos: {e}")
        return None

@app.route('/')
def index():
    last_scan = get_last_scan()
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    return render_template('index.html', last_scan=last_scan, current_time=current_time)

@app.route('/run_pipeline', methods=['POST'])
def run_pipeline():
    steps = [
        ('Iniciando escaneo de activos...', 'src/tools/asset_recognition/nmap_scan.py'),
        ('Escaneando activos con OpenVAS...', 'src/tools/vulnerability_analysis/openvas_scan.py'),
        ('Guardando resultados del escaneo...', 'src/tools/vulnerability_analysis/fetch_and_store_results.py'),
        ('Convirtiendo los scans...', 'src/models/convert_scans.py'),
        ('Ejecutando script de Metasploit...', 'src/tools/metasploit/set_exploitability_metric.py'),
        ('Calculando la correlaci√≥n...', 'src/tools/vulnerability_correlation/calculate_correlation.py')
    ]

    for message, script in steps:
        print(message)
        subprocess.run(['python', script])
    
    # Registrar la hora del escaneo
    try:
        conn = psycopg2.connect(
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT
        )
        cursor = conn.cursor()
        cursor.execute("INSERT INTO scan_metadata (scan_time) VALUES (NOW())")
        conn.commit()
        cursor.close()
        conn.close()
    except Exception as e:
        print(f"Error al registrar la hora del escaneo: {e}")
    
    return redirect(url_for('index'))

@app.route('/show_cves', methods=['GET'])
def show_cves():
    cves = get_cves_from_scan_results()
    return render_template('cves.html', cves=cves)

@app.route('/cve_details/<result_id>', methods=['GET'])
def cve_details(result_id):
    details = get_cve_details(result_id)
    return render_template('cve_details.html', result_id=result_id, details=details)

@app.route('/show_assets', methods=['GET'])
def show_assets():
    assets = get_assets()
    return render_template('assets.html', assets=assets)

if __name__ == "__main__":
    app.run(debug=True)

import subprocess
import psycopg2

from src.config.config import *

def get_exploit_maturity(cve_id):
    print(f"Checking exploit maturity for CVE: {cve_id}")
    try:
        result = subprocess.run(
            ['msfconsole', '-q', '-x', f'search cve:{cve_id}; exit'],
            capture_output=True, text=True, timeout=60
        )
        output = result.stdout
        print(f"Output for CVE {cve_id}:\n{output}")

        if "No results found" in output:
            return "U"  # Unproven

        if "excellent" in output or "great" in output:
            return "H"  # High
        elif "good" in output or "normal" in output:
            return "F"  # Functional
        elif "average" in output:
            return "P"  # Proof-of-Concept
        elif "low" in output or "manual" in output:
            return "U"  # Unproven
        else:
            return "X"  # Not Defined
    except subprocess.TimeoutExpired:
        print(f"Timeout expired for CVE: {cve_id}")
        return "X"
    except FileNotFoundError:
        print("msfconsole not found. Make sure Metasploit is installed and in your PATH.")
        return "X"

def process_vulnerability(vuln):
    result_id, cves = vuln
    cves_list = [cve for cve in cves.split(', ') if cve != 'N/A']

    if not cves_list:
        return result_id, 'X'

    exploit_maturities = [get_exploit_maturity(cve) for cve in cves_list]
    combined_maturity = max(exploit_maturities, key=lambda x: {'X': 0, 'U': 1, 'P': 2, 'F': 3, 'H': 4}[x])

    return result_id, combined_maturity

# Conexión a la base de datos
print("Connecting to the database...")
conn = psycopg2.connect(
    dbname=DB_NAME,
    user=DB_USER,
    password=DB_PASSWORD,
    host=DB_HOST,
    port=DB_PORT
)

# Crear un cursor
cur = conn.cursor()

# Obtener todos los registros con CVEs de la tabla scan_results
print("Fetching all results with CVEs from scan_results...")
cur.execute("SELECT result_id, cves FROM scan_results WHERE cves IS NOT NULL")
results = cur.fetchall()

# Procesar cada vulnerabilidad y actualizar la base de datos
print("Processing vulnerabilities...")
for result in results:
    result_id, cves = result
    if cves == 'N/A':
        combined_maturity = 'X'  # Not Defined
    else:
        result_id, combined_maturity = process_vulnerability(result)
    
    print(f"Updating result {result_id} with combined maturity {combined_maturity}")
    cur.execute("""
        UPDATE scan_results
        SET exploitability = %s
        WHERE result_id = %s
    """, (combined_maturity, result_id))
    conn.commit()  # Confirmar los cambios después de cada actualización para evitar perder datos en caso de interrupción

# Cerrar el cursor y la conexión
cur.close()
conn.close()
print("Database connection closed.")

import psycopg2
import matplotlib.pyplot as plt
import os

from src.config.config import *

# Directorio donde se guardarán las imágenes
output_dir = 'src/figures/cvss_distribution'
os.makedirs(output_dir, exist_ok=True)

# Conectar a PostgreSQL
conn = psycopg2.connect(
    dbname=DB_NAME,
    user=DB_USER,
    password=DB_PASSWORD,
    host=DB_HOST,
    port=DB_PORT
)
cursor = conn.cursor()

# Consulta para obtener los resultados del escaneo
query = """
SELECT sr.host, sr.cvss 
FROM scan_results sr
JOIN assets a ON sr.host = a.ip_address
"""
cursor.execute(query)
results = cursor.fetchall()

# Cerrar la conexión
cursor.close()
conn.close()

# Definir los rangos de CVSS y colores
cvss_ranges = {
    'None': (0.0, 0.0),
    'Low': (0.1, 3.9),
    'Medium': (4.0, 6.9),
    'High': (7.0, 8.9),
    'Critical': (9.0, 10.0)
}
colors = {
    'None': 'grey',
    'Low': 'green',
    'Medium': 'yellow',
    'High': 'orange',
    'Critical': 'red'
}

# Función para clasificar CVSS
def classify_cvss(score):
    for rating, (low, high) in cvss_ranges.items():
        if low <= score <= high:
            return rating
    return 'Unknown'

# Procesar los datos
from collections import defaultdict
ip_data = defaultdict(lambda: defaultdict(int))
overall_data = defaultdict(int)

for ip, cvss in results:
    rating = classify_cvss(cvss)
    ip_data[ip][rating] += 1
    overall_data[rating] += 1

# Función para crear y guardar gráficos
def create_pie_chart(data, title, filename):
    labels = list(data.keys())  # Convertir dict_keys a lista
    sizes = data.values()
    color_values = [colors[label] for label in labels]

    fig, ax = plt.subplots(figsize=(8, 8))
    fig.patch.set_facecolor('#2c3e50')  # Cambiar el color de fondo de la figura
    ax.set_facecolor('#2c3e50')  # Cambiar el color de fondo del eje

    wedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=color_values, autopct='%1.1f%%', startangle=140)

    # Cambiar el color de las etiquetas
    for i, text in enumerate(texts):
        if labels[i] in ['High', 'Critical' , 'Medium' , 'Low' , 'None']:
            text.set_color('white')
            text.set_fontsize(14)
        else:
            text.set_color('#2c3e50')  # Mismo color que el fondo
            text.set_fontsize(12)
            text.set_weight('bold')

    # Cambiar el tamaño y color de los porcentajes
    for autotext in autotexts:
        autotext.set_fontsize(14)
        autotext.set_color('#2c3e50')  # Mismo color que el fondo

    ax.set_title(title, color='white' ,  weight='bold')
    ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
    plt.savefig(os.path.join(output_dir, filename))

# Graficar los datos por IP
for ip, data in ip_data.items():
    sanitized_ip = ip.replace('.', '_')  # Reemplazar puntos con guiones bajos
    create_pie_chart(data, '', f'{sanitized_ip}_cvss_distribution.png')

# Graficar los datos generales
create_pie_chart(overall_data, '', 'general_cvss_distribution.png')

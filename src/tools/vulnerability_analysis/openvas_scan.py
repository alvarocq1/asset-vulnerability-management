import time
import psycopg2
from datetime import datetime
from gvm.connections import TLSConnection
from gvm.protocols.gmp import Gmp
from gvm.transforms import EtreeCheckCommandTransform
from src.config.config import *

# Configuración de PostgreSQL
conn = psycopg2.connect(
    dbname=DB_NAME,
    user=DB_USER,
    password=DB_PASSWORD,
    host=DB_HOST,
    port=DB_PORT
)

def fetch_ips():
    cur = conn.cursor()
    cur.execute("SELECT ip_address FROM assets")
    rows = cur.fetchall()
    cur.close()
    return [row[0] for row in rows]

def get_scanner_id(gmp):
    scanners = gmp.get_scanners()
    for scanner in scanners.xpath('scanner'):
        if scanner.find('name').text == 'OpenVAS Default':
            return scanner.get('id')
    raise Exception("No scanner found")

def create_openvas_task(gmp, ip, scanner_id):
    response = gmp.create_target(
        name=f"Target-{ip}",
        hosts=[ip],
        port_list_id="33d0cd82-57c6-11e1-8ed1-406186ea4fc5"  # ID de una lista de puertos comúnmente utilizada
    )
    target_id = response.xpath("//@id")[0]

    response = gmp.create_task(
        name=f"Task-{ip}",
        config_id="daba56c8-73ec-11df-a475-002264764cea",  # ID del OpenVAS Full and Fast Scan Config
        target_id=target_id,
        scanner_id=scanner_id
    )
    task_id = response.xpath("//@id")[0]
    return task_id

def start_openvas_task(gmp, task_id):
    gmp.start_task(task_id=task_id)

def check_task_status(gmp, task_id):
    status = gmp.get_task(task_id=task_id).xpath('//status/text()')[0]
    progress = gmp.get_task(task_id=task_id).xpath('//progress/text()')[0]
    return status, progress

def store_task(task_id, ip):
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO scan_tasks (task_id, ip_address)
        VALUES (%s, %s)
        ON CONFLICT (task_id)
        DO NOTHING;
    """, (task_id, ip))
    conn.commit()
    cur.close()

def store_scan_metadata(task_id, ip, start_time, end_time):
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO scan_metadata (task_id, ip_address, start_time, end_time, scan_time)
        VALUES (%s, %s, %s, %s, %s)
        ON CONFLICT (task_id)
        DO NOTHING;
    """, (task_id, ip, start_time, end_time, end_time - start_time))
    conn.commit()
    cur.close()

def task_exists(ip):
    cur = conn.cursor()
    cur.execute("SELECT task_id FROM scan_tasks WHERE ip_address = %s", (ip,))
    task = cur.fetchone()
    cur.close()
    return task is not None

def main():
    connection = TLSConnection(hostname=OPENVAS_HOST, port=OPENVAS_PORT)
    transform = EtreeCheckCommandTransform()
    with Gmp(connection=connection, transform=transform) as gmp:
        gmp.authenticate(username=OPENVAS_USER, password=OPENVAS_PASSWORD)
        scanner_id = get_scanner_id(gmp)
        ips = fetch_ips()

        for ip in ips:
            if task_exists(ip):
                print(f"Task for IP {ip} already exists. Skipping.")
                continue

            start_time = datetime.now()
            task_id = create_openvas_task(gmp, ip, scanner_id)
            store_task(task_id, ip)
            start_openvas_task(gmp, task_id)

            while True:
                status, progress = check_task_status(gmp, task_id)
                print(f"Status for {ip}: {status}, Progress: {progress}%")
                if status == 'Done':
                    end_time = datetime.now()
                    store_scan_metadata(task_id, ip, start_time, end_time)
                    break
                time.sleep(10)

if __name__ == "__main__":
    main()

import psycopg2
from gvm.connections import TLSConnection
from gvm.protocols.gmp import Gmp
from gvm.transforms import EtreeCheckCommandTransform
from src.config.config import *

def delete_task_and_targets(task_id):
    # Conexi√≥n a OpenVAS
    connection = TLSConnection(hostname=OPENVAS_HOST, port=OPENVAS_PORT)
    transform = EtreeCheckCommandTransform()

    with Gmp(connection=connection, transform=transform) as gmp:
        gmp.authenticate(username=OPENVAS_USER, password=OPENVAS_PASSWORD)
        
        # Obtener el target ID asociado al task
        response = gmp.get_task(task_id=task_id)
        target_id = response.xpath('//target/@id')[0]
        
        # Eliminar el task
        gmp.delete_task(task_id=task_id)
        print(f"Task {task_id} eliminado.")

        # Eliminar el target
        gmp.delete_target(target_id=target_id)
        print(f"Target {target_id} eliminado.")

        # Eliminar referencias en la base de datos
        conn = psycopg2.connect(
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT
        )
        cur = conn.cursor()
        
        # Eliminar de scan_metadata
        cur.execute("DELETE FROM scan_metadata WHERE task_id = %s", (task_id,))
        conn.commit()
        
        # Eliminar de scan_tasks
        cur.execute("DELETE FROM scan_tasks WHERE task_id = %s", (task_id,))
        conn.commit()
        
        cur.close()
        conn.close()
        print(f"Referencias del task {task_id} eliminadas de la base de datos.")

if __name__ == "__main__":
    task_id = '52a15f69-894c-4868-9648-ee64e513b1df'
    delete_task_and_targets(task_id)

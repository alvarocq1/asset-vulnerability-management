import psycopg2
from psycopg2 import OperationalError
from gvm.connections import TLSConnection
from gvm.protocols.gmp import Gmp
from gvm.transforms import EtreeCheckCommandTransform
from src.config.config import *
import subprocess
import threading

def check_postgresql_connection():
    try:
        conn = psycopg2.connect(
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT
        )
        conn.close()
        return True
    except OperationalError as e:
        print(f"PostgreSQL connection failed: {e}")
        return False

def check_openvas_connection():
    result = {'status': False}

    def _check_openvas():
        try:
            connection = TLSConnection(hostname=OPENVAS_HOST, port=OPENVAS_PORT)
            transform = EtreeCheckCommandTransform()
            with Gmp(connection=connection, transform=transform) as gmp:
                gmp.authenticate(username=OPENVAS_USER, password=OPENVAS_PASSWORD)
                result['status'] = True
        except Exception as e:
            print(f"OpenVAS connection failed: {e}")
            result['status'] = False

    thread = threading.Thread(target=_check_openvas)
    thread.start()
    thread.join(timeout=5)  # 5 seconds timeout
    return result['status']

def check_metasploit_connection():
    try:
        result = subprocess.run(['/opt/metasploit-framework/bin/msfconsole', '-q', '-x', 'version; exit'], capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            print("Metasploit connection successful")
            print(result.stdout)
            return True
        else:
            print(f"Metasploit connection failed: {result.stderr}")
            return False
    except Exception as e:
        print(f"Metasploit connection failed: {e}")
        return False

def check_nmap_installed():
    try:
        result = subprocess.run(['nmap', '-v'], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("nmap is installed")
            return True
        else:
            print("nmap is not installed or not working correctly")
            return False
    except FileNotFoundError:
        print("nmap is not installed")
        return False
    except Exception as e:
        print(f"An error occurred while checking nmap: {e}")
        return False

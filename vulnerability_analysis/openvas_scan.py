import time
import psycopg2
from gvm.connections import UnixSocketConnection
from gvm.protocols.gmp import Gmp
from gvm.transforms import EtreeCheckCommandTransform

# Configuración de PostgreSQL
conn = psycopg2.connect(
    dbname="tfg_db",
    user="acarriq",
    password="3432576",
    host="localhost",
    port="5433"
)

def fetch_ips():
    cur = conn.cursor()
    cur.execute("SELECT ip_address FROM assets")
    rows = cur.fetchall()
    cur.close()
    return [row[0] for row in rows]

def get_scanner_id(gmp):
    scanners = gmp.get_scanners()
    # Asumiendo que hay un escáner llamado "OpenVAS Default"
    for scanner in scanners.xpath('scanner'):
        if scanner.find('name').text == 'OpenVAS Default':
            return scanner.get('id')
    raise Exception("No scanner found")

def create_openvas_task(gmp, ip, scanner_id):
    print(f"Creating target for IP: {ip}")
    response = gmp.create_target(
        name=f"Target-{ip}",
        hosts=[ip],
        port_list_id="33d0cd82-57c6-11e1-8ed1-406186ea4fc5"  # ID de una lista de puertos comúnmente utilizada
    )
    target_id = response.xpath("//@id")[0]

    print(f"Creating task for target ID: {target_id}")
    response = gmp.create_task(
        name=f"Task-{ip}",
        config_id="daba56c8-73ec-11df-a475-002264764cea",  # ID del OpenVAS Default Scan Config
        target_id=target_id,
        scanner_id=scanner_id  # Incluyendo scanner_id
    )
    task_id = response.xpath("//@id")[0]
    return task_id

def start_openvas_task(gmp, task_id):
    print(f"Starting task ID: {task_id}")
    gmp.start_task(task_id=task_id)

def check_task_status(gmp, task_id):
    print(f"Checking status for task ID: {task_id}")
    status = gmp.get_task(task_id=task_id).xpath('//status/text()')[0]
    return status

def main():
    # Conectar a OpenVAS usando UnixSocketConnection
    connection = UnixSocketConnection(path='/run/gvm/gvmd.sock')  # Ruta confirmada del socket UNIX
    transform = EtreeCheckCommandTransform()
    print("Connecting to OpenVAS...")
    with Gmp(connection=connection, transform=transform) as gmp:
        print("Authenticating...")
        gmp.authenticate(username="admin", password="admin")  # Cambia las credenciales según corresponda

        # Obtener el scanner_id
        scanner_id = get_scanner_id(gmp)
        print(f"Using scanner ID: {scanner_id}")

        # Obtener IPs desde PostgreSQL
        print("Fetching IPs from database...")
        ips = fetch_ips()
        print(f"Found IPs: {ips}")

        for ip in ips:
            # Crear tarea en OpenVAS
            task_id = create_openvas_task(gmp, ip, scanner_id)
            # Iniciar tarea en OpenVAS
            start_openvas_task(gmp, task_id)
            print(f"Started scan for {ip}")

            # Monitorear el estado del escaneo
            while True:
                status = check_task_status(gmp, task_id)
                print(f"Status for {ip}: {status}")
                if status == 'Done':
                    print(f"Scan completed for {ip}")
                    break
                time.sleep(60)  # Esperar 60 segundos antes de verificar nuevamente

if __name__ == "__main__":
    main()

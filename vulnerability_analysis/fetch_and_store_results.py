import psycopg2
from gvm.connections import UnixSocketConnection
from gvm.protocols.gmp import Gmp
from gvm.transforms import EtreeCheckCommandTransform
from gvm.errors import GvmError
from lxml import etree

def authenticate(gmp):
    gmp.authenticate('admin', 'admin')

def get_report_id_by_task(gmp, task_id):
    response = gmp.get_reports(filter_string=f"task_id={task_id}")
    report_id = None
    for report in response.xpath('.//report'):
        report_id = report.get('id')
        break
    return report_id

def fetch_report(gmp, report_id, cursor):
    try:
        response = gmp.get_report(report_id=report_id, details=True)

        # Escribir el XML de respuesta en un archivo
        with open("report.xml", "w") as file:
            file.write(etree.tostring(response, pretty_print=True).decode())

        print("The XML report has been written to 'report.xml'.")

        print("\nResults:")
        for result in response.xpath('//report/results/result'):
            result_id = result.get('id')
            name = result.find('name').text
            host = result.find('host').text
            port = result.find('port').text if result.find('port') is not None else 'N/A'
            cvss = result.find('nvt/cvss_base').text if result.find('nvt/cvss_base') is not None else '0.0'
            qod = result.find('qod/value').text if result.find('qod/value') is not None else 'N/A'
            nvt = result.find('nvt')
            if nvt is not None:
                nvt_oid = nvt.get('oid') if nvt is not None else 'N/A'
                nvt_family = nvt.find('family').text if nvt.find('family') is not None else 'N/A'
                solution_type = nvt.find('solution').get('type') if nvt.find('solution') is not None else 'N/A'
                
                # Extracting CVE ID
                cve = 'N/A'
                refs = nvt.find('refs')
                if refs is not None:
                    for ref in refs.findall('ref'):
                        if ref.get('type') == 'cve':
                            cve = ref.get('id')
                            break
                
                # Only process results with CVSS > 0.0
                if float(cvss) > 0.0:
                    print(f"Result ID: {result_id}")
                    print(f"Name: {name}")
                    print(f"Host: {host}")
                    print(f"Port: {port}")
                    print(f"Solution Type: {solution_type}")
                    print(f"CVSS: {cvss}")
                    print(f"NVT OID: {nvt_oid}")
                    print(f"NVT Family: {nvt_family}")
                    print(f"CVE: {cve}")
                    print(f"QOD: {qod}")
                    print()

                    # Insert result into database
                    cursor.execute("""
                        INSERT INTO scan_results (result_id, name, host, port, cvss, qod, nvt_oid, nvt_family, cve, solution_type)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                        ON CONFLICT (result_id) DO NOTHING;
                    """, (result_id, name, host, port, cvss, qod, nvt_oid, nvt_family, cve, solution_type))
            
    except GvmError as e:
        print(f'An error occurred: {e}')

def main():
    # Conectar a PostgreSQL
    conn = psycopg2.connect(
        dbname="tfg_db",
        user="acarriq",
        password="3432576",
        host="localhost",
        port="5433"
    )
    cursor = conn.cursor()

    # Conectar a OpenVAS usando UnixSocketConnection
    connection = UnixSocketConnection(path='/run/gvm/gvmd.sock')  # Ruta confirmada del socket UNIX
    transform = EtreeCheckCommandTransform()
    print("Connecting to OpenVAS...")
    with Gmp(connection=connection, transform=transform) as gmp:
        print("Authenticating...")
        authenticate(gmp)
        
        task_id = 'dbf30110-a006-4faa-b411-c5ed0b23e55f'  # Replace with your actual Task ID
        print("Fetching report ID for task ID:", task_id)
        report_id = get_report_id_by_task(gmp, task_id)
        
        if report_id:
            print("Report ID found:", report_id)
            fetch_report(gmp, report_id, cursor)
        else:
            print("No report found for the given task ID.")
        
        gmp.disconnect()

    # Guardar cambios y cerrar la conexi√≥n
    conn.commit()
    cursor.close()
    conn.close()

if __name__ == "__main__":
    main()

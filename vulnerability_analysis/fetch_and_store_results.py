import psycopg2
from gvm.connections import UnixSocketConnection
from gvm.protocols.gmp import Gmp
from gvm.transforms import EtreeCheckCommandTransform

# Configuración de PostgreSQL
conn = psycopg2.connect(
    dbname="tfg_db",
    user="acarriq",
    password="3432576",
    host="localhost",
    port="5433"
)

def fetch_task_ids():
    cur = conn.cursor()
    cur.execute("SELECT task_id, ip_address FROM scan_tasks")
    rows = cur.fetchall()
    cur.close()
    return rows

def fetch_task_results(gmp, task_id):
    response = gmp.get_results(task_id=task_id)
    results = []
    for result in response.xpath("//result"):
        ip_address = result.xpath("host/text()")[0]
        port = result.xpath("port/text()")[0]
        severity = result.xpath("severity/text()")[0]
        name = result.xpath("name/text()")[0]
        nvt_oid = result.xpath("nvt/@oid")[0]
        description = result.xpath("description/text()")[0]
        results.append((ip_address, port, severity, name, nvt_oid, description))
    return results

def store_results(results):
    cur = conn.cursor()
    for result in results:
        cur.execute("""
            INSERT INTO scan_results (ip_address, port, severity, name, nvt_oid, description)
            VALUES (%s, %s, %s, %s, %s, %s)
            ON CONFLICT (ip_address, port, nvt_oid)
            DO UPDATE SET severity = EXCLUDED.severity, name = EXCLUDED.name, description = EXCLUDED.description;
        """, result)
    conn.commit()
    cur.close()

def main():
    # Conectar a OpenVAS usando UnixSocketConnection
    connection = UnixSocketConnection(path='/run/gvm/gvmd.sock')  # Ruta confirmada del socket UNIX
    transform = EtreeCheckCommandTransform()
    print("Connecting to OpenVAS...")
    with Gmp(connection=connection, transform=transform) as gmp:
        print("Authenticating...")
        gmp.authenticate(username="admin", password="admin")  # Cambia las credenciales según corresponda

        # Obtener los IDs de las tareas ya realizadas
        print("Fetching task IDs from database...")
        task_ids = fetch_task_ids()
        print(f"Found task IDs: {task_ids}")

        for task_id, ip in task_ids:
            print(f"Fetching results for task ID: {task_id}")
            results = fetch_task_results(gmp, task_id)
            store_results(results)
            print(f"Stored results for task ID: {task_id}, IP: {ip}")

if __name__ == "__main__":
    main()
